<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Audacity简单使用体验</title>
    <url>/2021/04/19/Audacity%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p><code>Audacity</code>的安装非常简单，直接用apt管理器安装即可</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt install audacity</span><br></pre></td></tr></table></figure>
<p>以前没怎么剪辑过音频，这次安装<code>Audacity</code>是为了剪辑一首歌的纯音乐部分，可以说本人在剪辑方面就是完全的小白，但是在使用<code>Audacity</code>的时候仍然感觉十分舒服，用了一小会就能简单使用，布局和操作都非常人性化</p>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/20200323223858575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>后来在win上使用，依然是很棒的音频剪辑软件</p>
]]></content>
      <tags>
        <tag>Music</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++编程YouCompleteMe报错：RuntimeError: No completions found； errors in the file?</title>
    <url>/2021/04/19/C-C-%E7%BC%96%E7%A8%8BYouCompleteMe%E6%8A%A5%E9%94%99%EF%BC%9ARuntimeError-No-completions-found%EF%BC%9B-errors-in-the-file/</url>
    <content><![CDATA[<p><code>Vimplus</code>自带<code>YouCompleteMe</code>插件，在正确安装Vimplus后，使用C语言编程的过程中频繁报错：</p>
<span id="more"></span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RuntimeError: No completions found; errors in the file?</span><br></pre></td></tr></table></figure>
<p>去看了<code>YouCompleteMe</code>的<a href="(https://github.com/ycm-core/YouCompleteMe)">官方文档</a>后，发现<code>Vimplus</code>是在不支持C系列语言的情况下编译YCM的，根据指引需要编译YCM 与通过C家族语言的语义支持 <code>clangd</code></p>
<p>如果是安装通过<code>YouCompleteMe</code>官方文档的方式进行的，则遵循如下文档指引即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;.vim&#x2F;bundle&#x2F;YouCompleteMe</span><br><span class="line">python3 install.py --clangd-completer</span><br></pre></td></tr></table></figure>
<p><code>Vimplus</code>将<code>YouCompleteMe</code>等所有插件安装在了<code>.vim/plugged</code>，应按以下操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;.vim&#x2F;plugged&#x2F;YouCompleteMe</span><br><span class="line">python3 install.py --clangd-completer</span><br></pre></td></tr></table></figure>
<p>重新编译后，C编程就没有报错了</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Vim</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中apt与apt-get命令的区别与解释[转]</title>
    <url>/2021/04/19/Linux%E4%B8%ADapt%E4%B8%8Eapt-get%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<p><a href="https://www.sysgeek.cn/apt-vs-apt-get/">原文地址</a></p>
<p><img src="https://img.sysgeek.cn/img/logo/linux/linux-2.jpg" alt="img"></p>
<p>Ubuntu 16.04 发布时，一个引人注目的新特性便是 <strong>apt</strong> 命令的引入。其实早在 2014 年，<strong>apt</strong> 命令就已经发布了第一个稳定版，只是直到 2016 年的 Ubuntu 16.04 系统发布时才开始引人关注。</p>
<span id="more"></span>

<p>随着 <strong>apt install package</strong> 命令的使用频率和普遍性逐步超过 <strong>apt-get install package</strong>，越来越多的其它 Linux 发行版也开始遵循 Ubuntu 的脚步，开始鼓励用户使用 <strong>apt</strong> 而不是 <strong>apt-get</strong>。</p>
<p>那么，<strong>apt-get</strong> 与 <strong>apt</strong> 命令之间到底有什么区别呢？如果它们有类似的命令结构，为什么还需要新的 <strong>apt</strong> 命令呢？是否 <strong>apt</strong> 真的比 <strong>apt-get</strong> 更好？普通用户应该使用新的 <strong>apt</strong> 命令还是坚持旧有习惯继续使用 <strong>apt-get</strong> 呢？</p>
<p>系统极客将在本文中解释所有这些问题，我们希望本文结束时，你将会有一个更清晰的了解。</p>
<h2 id="apt与apt-get"><a href="#apt与apt-get" class="headerlink" title="apt与apt-get"></a>apt与apt-get</h2><p>在开始对比 <strong>apt</strong> 与 <strong>apt-get</strong> 命令的区别之前，我们先来看看这两个命令的背景，以及它们要试图达到的目的。</p>
<p>Debian 作为 Ubuntu、Linux Mint 和 elementary OS 等 Linux 操作系统的母板，其具有强健的「包管理」系统，它的每个组件和应用程序都内置在系统中安装的软件包中。Debian 使用一套名为 <a href="https://wiki.debian.org/Apt">Advanced Packaging Tool</a>（APT）的工具来管理这种包系统，不过请不要把它与 <strong>apt</strong> 命令混淆，它们之间是其实不是同一个东西。</p>
<p>在基于 Debian 的 Linux 发行版中，有各种工具可以与 APT 进行交互，以方便用户安装、删除和管理的软件包。<strong>apt-get</strong> 便是其中一款广受欢迎的命令行工具，另外一款较为流行的是 <a href="https://wiki.debian.org/Aptitude?action=show&redirect=aptitude">Aptitude</a> 这一命令行与 GUI 兼顾的小工具。</p>
<p>如果你已阅读过我们的 <a href="https://www.sysgeek.cn/linux-package-management/">apt-get 命令指南</a>，可能已经遇到过许多类似的命令，如<strong>apt-cache</strong>、<strong>apt-config</strong> 等。如你所见，这些命令都比较低级又包含众多功能，普通的 Linux 用户也许永远都不会使用到。换种说法来说，就是最常用的 Linux 包管理命令都被分散在了 <strong>apt-get</strong>、<strong>apt-cache</strong> 和 <strong>apt-config</strong> 这三条命令当中。</p>
<p><strong>apt</strong> 命令的引入就是为了解决命令过于分散的问题，它包括了 <strong>apt-get</strong> 命令出现以来使用最广泛的功能选项，以及 <strong>apt-cache</strong> 和 <strong>apt-config</strong> 命令中很少用到的功能。</p>
<p>在使用 <strong>apt</strong> 命令时，用户不必再由 <strong>apt-get</strong> 转到 <strong>apt-cache</strong> 或 <strong>apt-config</strong>，而且 <strong>apt</strong> 更加结构化，并为用户提供了管理软件包所需的必要选项。</p>
<blockquote>
<p>简单来说就是：apt = apt-get、apt-cache 和 apt-config 中最常用命令选项的集合。</p>
</blockquote>
<h3 id="apt与apt-get之间的区别"><a href="#apt与apt-get之间的区别" class="headerlink" title="apt与apt-get之间的区别"></a>apt与apt-get之间的区别</h3><p>通过 <strong>apt</strong> 命令，用户可以在同一地方集中得到所有必要的工具，<strong>apt</strong> 的主要目的是提供一种以「让终端用户满意」的方式来处理 Linux 软件包的有效方式。</p>
<p><strong>apt</strong> 具有更精减但足够的命令选项，而且参数选项的组织方式更为有效。除此之外，它默认启用的几个特性对最终用户也非常有帮助。例如，可以在使用 <strong>apt</strong> 命令安装或删除程序时看到进度条。</p>
<p><img src="https://img.sysgeek.cn/img/2017/07/apt-vs-apt-get/2.jpg" alt="img"></p>
<p><strong>apt</strong> 还会在更新存储库数据库时提示用户可升级的软件包个数。</p>
<p><img src="https://img.sysgeek.cn/img/2017/07/apt-vs-apt-get/3.jpg" alt="img"></p>
<p>如果你使用 <strong>apt</strong> 的其它命令选项，也可以实现与使用 <strong>apt-get</strong> 时相同的操作。</p>
<h3 id="apt和apt-get命令之间的区别"><a href="#apt和apt-get命令之间的区别" class="headerlink" title="apt和apt-get命令之间的区别"></a>apt和apt-get命令之间的区别</h3><p>虽然 <strong>apt</strong> 与 <strong>apt-get</strong> 有一些类似的命令选项，但它并不能完全向下兼容 <strong>apt-get</strong> 命令。也就是说，可以用 <strong>apt</strong> 替换部分 <strong>apt-get</strong> 系列命令，但不是全部。</p>
<table>
<thead>
<tr>
<th align="center">apt 命令</th>
<th align="center">取代的命令</th>
<th align="center">命令的功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">apt install</td>
<td align="center">apt-get install</td>
<td align="center">安装软件包</td>
</tr>
<tr>
<td align="center">apt remove</td>
<td align="center">apt-get remove</td>
<td align="center">移除软件包</td>
</tr>
<tr>
<td align="center">apt purge</td>
<td align="center">apt-get purge</td>
<td align="center">移除软件包及配置文件</td>
</tr>
<tr>
<td align="center">apt update</td>
<td align="center">apt-get update</td>
<td align="center">刷新存储库索引</td>
</tr>
<tr>
<td align="center">apt upgrade</td>
<td align="center">apt-get upgrade</td>
<td align="center">升级所有可升级的软件包</td>
</tr>
<tr>
<td align="center">apt autoremove</td>
<td align="center">apt-get autoremove</td>
<td align="center">自动删除不需要的包</td>
</tr>
<tr>
<td align="center">apt full-upgrade</td>
<td align="center">apt-get dist-upgrade</td>
<td align="center">在升级软件包时自动处理依赖关系</td>
</tr>
<tr>
<td align="center">apt search</td>
<td align="center">apt-cache search</td>
<td align="center">搜索应用程序</td>
</tr>
<tr>
<td align="center">apt show</td>
<td align="center">apt-cache show</td>
<td align="center">显示装细节</td>
</tr>
</tbody></table>
<p>当然，apt 还有一些自己的命令：</p>
<table>
<thead>
<tr>
<th align="center">新的apt命令</th>
<th align="center">命令的功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">apt list</td>
<td align="center">列出包含条件的包（已安装，可升级等）</td>
</tr>
<tr>
<td align="center">apt edit-sources</td>
<td align="center">编辑源列表</td>
</tr>
</tbody></table>
<p>需要大家注意的是：<strong>apt</strong> 命令也还在不断发展， 因此，你可能会在将来的版本中看到新的选项。</p>
<h2 id="apt-get已弃用？"><a href="#apt-get已弃用？" class="headerlink" title="apt-get已弃用？"></a>apt-get已弃用？</h2><p>目前还没有任何 Linux 发行版官方放出 <strong>apt-get</strong> 将被停用的消息，至少它还有比 <strong>apt</strong> 更多、更细化的操作功能。对于低级操作，仍然需要 <strong>apt-get</strong>。</p>
<h2 id="我应该使用apt还是apt-get？"><a href="#我应该使用apt还是apt-get？" class="headerlink" title="我应该使用apt还是apt-get？"></a>我应该使用apt还是apt-get？</h2><p>既然两个命令都有用，那么我该使用 <strong>apt</strong> 还是 <strong>apt-get</strong> 呢？作为一个常规 Linux 用户，系统极客建议大家尽快适应并开始首先使用 <strong>apt</strong>。不仅因为广大 Linux 发行商都在推荐 <strong>apt</strong>，更主要的还是它提供了 Linux 包管理的必要选项。</p>
<p>最重要的是，apt 命令选项更少更易记，因此也更易用，所以没理由继续坚持 <strong>apt-get</strong>。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>最后结大家提供两点使用上的建议：</p>
<ul>
<li><strong>apt</strong> 可以看作 <strong>apt-get</strong> 和 <strong>apt-cache</strong> 命令的子集, 可以为包管理提供必要的命令选项。</li>
<li><strong>apt-get</strong> 虽然没被弃用，但作为普通用户，还是应该首先使用 <strong>apt</strong>。</li>
</ul>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo建站参考资料</title>
    <url>/2021/04/20/Hexo%E5%BB%BA%E7%AB%99%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<p>本次建站主要参考了以下两篇博文</p>
<p><a href="https://mupceet.com/2019/08/build-blog-based-on-hexo/">Hexo 博客搭建与主题配置（零基础版）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/129644138">hexo+next个性化配置</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Notion使用笔记一：实现子弹笔记电子化</title>
    <url>/2021/04/25/Notion%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E5%AE%9E%E7%8E%B0%E5%AD%90%E5%BC%B9%E7%AC%94%E8%AE%B0%E7%94%B5%E5%AD%90%E5%8C%96/</url>
    <content><![CDATA[<h1 id="Notion使用笔记一：实现子弹笔记电子化"><a href="#Notion使用笔记一：实现子弹笔记电子化" class="headerlink" title="Notion使用笔记一：实现子弹笔记电子化"></a>Notion使用笔记一：实现子弹笔记电子化</h1><p><a href="https://www.douban.com/note/769517273/?type=like">原文地址</a></p>
<p><a href="https://www.douban.com/people/206882534/"><img src="https://img2.doubanio.com/icon/u206882534-3.jpg" alt="CX"></a> <a href="https://www.douban.com/people/206882534/">CX</a> <strong>2020-07-04 11:01:06</strong></p>
<span id="more"></span>

<p>我用子弹笔记做了两年的计划和笔记，喜欢它的灵活度，也可以满足我时不时想写写画画的需求。但子弹笔记对我来说的缺点是每个月都会需要花一定时间在做版面上面。一开始尝试各种新版面的时候很愉快，但之后就慢慢变成了重复工作。再来最近很多网络会议，而且每天基本都是对着电脑，直接把链接保存到日历更方便一些。</p>
<p>接触Notion之后，发现Notion可以实现和子弹笔记一样的高自由度排版。而且因为可以创建模版，每次做计划的时候只需要建个新页面，之后也能再按需调整。<strong>模版链接在文末</strong></p>
<p>另外，Notion也可以将我本来记在“待办事项”、“备忘录”、“日历”里的事项，还有其他零散的文件都整合到一起。把所有任务都储存到一张总任务表之后，还可以利用linked database和不同的视图/筛选功能在不同地方显示想要的部分（这个操作会在月计划模版里详细介绍）。</p>
<p>先放两张对比图：</p>
<p><img src="/D:/blog\source\image\p73986483.webp" alt="p73986483"></p>
<p>现在使用的Notion版面</p>
<p><img src="/D:/blog\source\image\p73986516.webp" alt="p73986516"></p>
<p>原来的纸版子弹笔记</p>
<h2 id="年计划"><a href="#年计划" class="headerlink" title="年计划"></a>年计划</h2><p><img src="/D:/blog\source\image\p73986519.webp" alt="p73986519"></p>
<p>和子弹笔记一样，我的Notion也分成年计划、月计划，和周计划。</p>
<p>年计划最简单：上面是月计划清单（图上只有六月份），下面是未来计划（Future Log）。</p>
<p>未来计划（Future Log）沿用了子弹笔记的逻辑：在一月的时候我可能就知道八月份要参加会议，但因为我还没开始做八月的计划，就先把它记在这儿，等八月的时候再把这个事项放进去月计划里。（我不是很喜欢在年计划里放日历，因为一年的跨度翻起来不是很方便。）</p>
<h2 id="月计划"><a href="#月计划" class="headerlink" title="月计划"></a>月计划</h2><p><img src="/D:/blog\source\image\p73986521.webp" alt="p73986521"></p>
<p>月计划模版</p>
<p>月计划的第1块是这个月的目标和周计划链接（因为我的截图是模版，所以图中没有显示链接）。</p>
<p>第2块和第3块就用到了开头说到的Lined database。这两块是同一个database（标题都是“Master Project List”），就是下面这个页面：</p>
<p><img src="/D:/blog\source\image\p73986537.webp" alt="p73986537"></p>
<p>我的任务总表</p>
<p><img src="/D:/blog\source\image\p73987340.webp" alt="p73987340"></p>
<p>任务总表的日历视图，我还建了其他很多视图来满足其他需求</p>
<p>这个页面里面放上了我所有的计划和项目，然后用标签来区分这是我正在做的，还是我准备要做的。然后继续细分是做到什么程度——比如写作任务是在第一稿还是在修改中。</p>
<p>回到月计划的版面，第2块区域里我用的就是总任务表的日历视图，显示的是这个月已经计划好（放在日历上）的事情。至于我还没放上行程表的，我就用Board视图放在第3块区域，类似于子弹笔记月计划中的未来事项（总表里的标签就是“to be scheduled”）。这样的好处是我在这个月这个页面上做出的改动，可以同时反馈到总表里，保证信息的一致性，也方便跟踪。不用像纸质的子弹笔记一样，每次做计划都要再抄一遍。</p>
<h2 id="周计划"><a href="#周计划" class="headerlink" title="周计划"></a>周计划</h2><p><img src="/D:/blog\source\image\p73987205.webp" alt="p73987205"></p>
<p>周计划最复杂，但也是使用率最高的页面。</p>
<p>这个模版来源于Marie Poulin的weekly planner，我在她的基础上做了些修改，大致上还是非常像的。[1]</p>
<p>第1块区域是一些链接和这周的目标。第2块就是每天的任务清单。新建周计划的时候，我会把月日历上本周的事项放过来，然后每天开始工作之前再继续添加今天要做的任务。</p>
<p>第3块，我的任务总表又出现了。这里我让它显示的是我现在正在处理的任务（总表中的标签是In progress）。因为每天早上做计划的时候都是打开的是这个页面，所以直接在这儿放个我正处理的事情更方便查看我手头有哪些任务。</p>
<p><img src="/D:/blog\source\image\p73987424.png" alt="p73987424"></p>
<p>第4块区域沿用了Marie Poulin的每周自我反思板块。说实话，我用笔记本的子弹笔记也会留这么一块区域，但其实从来没写过…所以留在这里，更多是…填版面…</p>
<p>最后的第5块是生活习惯的追踪。我比较在意的是睡眠、运动，和工作效率，就建了个表把想记录的都放在这里。“Focus”是今天我做了多少个番茄时钟，最后的“Productivity”是给自己打分的一个地方，和子弹笔记的形式是一样的。</p>
<p>然后它也是个Linked database（下图），同样也是一个单独的页面。每周周计划上显示的只是这两周的记录，但是在总表里面可以形成一个长期的记录。</p>
<p><img src="/D:/blog\source\image\p73986551.webp" alt="p73986551"></p>
<p>我的生活习惯总表</p>
<p>最后，比较残念的是Notion的日历上无法设置重复任务。比如每个月交房租的事项，就得每次完成一个之后，拖到下个月。另一个小缺点就是Notion无法和iCal联动。不过它可以和谷歌日历联动，官方推特也表示正在考虑实现iCal的联动，所以希望之后能有这个功能。</p>
<p>总的来说，Notion可以用来实现很多不同的需求，这里也只是提供一种思路，推荐大家去试试这个软件。</p>
<p>附上之前写的安利贴（Notion读书追踪+习惯养成+书签收藏模版）：<a href="https://www.douban.com/group/topic/182080858/">https://www.douban.com/group/topic/182080858/</a></p>
<p><strong>子弹笔记模版：</strong></p>
<p>年计划：<a href="https://www.notion.so/_-a6ffe5450fc5433da934f4b36d508528">https://www.notion.so/_-a6ffe5450fc5433da934f4b36d508528</a></p>
<p>月计划：<a href="https://www.notion.so/_-72ddb20f114447d185fa5f6f9022c5d6">https://www.notion.so/_-72ddb20f114447d185fa5f6f9022c5d6</a></p>
<p>周计划：<a href="https://www.notion.so/_-fa967daa95d64bb182a68b64e6f38614">https://www.notion.so/_-fa967daa95d64bb182a68b64e6f38614</a></p>
<p>总计划清单：<a href="https://www.notion.so/8800c2231d5c4f21b5580204d9e2ac12?v=2997082161ce473288227eba232689f7">https://www.notion.so/8800c2231d5c4f21b5580204d9e2ac12?v=2997082161ce473288227eba232689f7</a></p>
<p>更新（21.02.10）：</p>
<p><img src="/D:/blog\source\image\p79828120.webp" alt="p79828120"></p>
<p>在模版中的年计划和月计划中新添加了小按钮，点击就可以添加新的月/周计划</p>
<p>[1] <a href="https://www.notion.so/Weekly-agenda-9e197cdf88dc4d3abf798b999ebce40a">https://www.notion.so/Weekly-agenda-9e197cdf88dc4d3abf798b999ebce40a</a></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Notion</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell编写“Hello Qt”Qt程序</title>
    <url>/2021/04/19/Shell%E7%BC%96%E5%86%99%E2%80%9CHello-Qt%E2%80%9DQt%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>首先在~/qt目录下新建prac文件夹，在prac文件夹内编写c++源代码程序</p>
<span id="more"></span>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> ~/qt/prac</span><br><span class="line"><span class="variable">$</span> vim prac.cpp</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">int</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">QApplication</span>(argc, argv);</span><br><span class="line">	QLabel *label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;Hello Qt!&quot;</span>);</span><br><span class="line">	label-&gt;<span class="built_in">show</span>();</span><br><span class="line">	<span class="keyword">return</span> app.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入以下命令，生成一个与平台无关的项目文件prac.pro</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">qmake <span class="literal">-project</span></span><br></pre></td></tr></table></figure>
<p>编辑生成的prac.pro文件，添加语句<code>greaterThan(QT_MAJOR_VERSION, 4): QT += widgets</code>或<code>QT += widgets</code>，为了保持与Qt4的兼容性，建议使用前者</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vim prac.pro</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">######################################################################</span><br><span class="line"># <span class="function">Automatically generated by <span class="title">qmake</span> <span class="params">(<span class="number">3.1</span>)</span> Thu Nov 14 20:<span class="number">22</span>:<span class="number">38</span> <span class="number">2019</span></span></span><br><span class="line"><span class="function">######################################################################</span></span><br><span class="line"><span class="function">TEMPLATE =</span> app</span><br><span class="line">TARGET = prac</span><br><span class="line">INCLUDEPATH += .</span><br><span class="line"></span><br><span class="line"># You can make your code fail to compile <span class="keyword">if</span> you use deprecated APIs.</span><br><span class="line"># In order to <span class="keyword">do</span> so, uncomment the following line.</span><br><span class="line"># Please consult the documentation of the deprecated API in order to know</span><br><span class="line"><span class="meta"># how to port your code away from it.</span></span><br><span class="line"># You can also select to disable deprecated APIs only up to a certain version of Q    t.</span><br><span class="line">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=<span class="number">0x060000</span>    <span class="meta"># disables all the APIs depre    cated before Qt 6.0.0</span></span><br><span class="line"></span><br><span class="line"># Input</span><br><span class="line">SOURCES += prac.cpp</span><br><span class="line"></span><br><span class="line"><span class="built_in">greaterThan</span>(QT_MAJOR_VERSION,<span class="number">4</span>):QT += widgets                                     </span><br><span class="line">                                                </span><br></pre></td></tr></table></figure>
<p>保存退出，然后输入以下命令，从这个项目文件生成一个与平台相关的makefile文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">qmake prac.pro</span><br></pre></td></tr></table></figure>
<p>键入<code>make</code>命令就可以构建该程序，然后就可以执行生成的可执行文件了</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">./prac</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20191114204646688.png" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 完美安装搜狗拼音输入法</title>
    <url>/2021/04/19/Ubuntu-18-04-%E5%AE%8C%E7%BE%8E%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写过一篇为IBus导入搜狗词库的博客，过了不久IBus就炸了，事实上在导入词库之前也炸过，IBus的可用行实在差强人意，诡异的词库和稳定性最终把我劝退。</p>
<span id="more"></span>

<p>安装Fcitx框架后，本想使用搜狗输入法，但由于fcitx组件问题，搜狗频频出现候选字乱码甚至没有候选字问题，只好退而其次依次尝试了Sunpinyin和Googlepinyin，然鹅使用体验也不好，缺词库，用了一段时间，最后在昨天决定换回搜狗输入法，毕竟搜狗词库和云同步实在太香了。</p>
<p>搜狗输入法的官方安装包是没有问题的，那么频频出现乱码的原因只能是Fcitx组件的一些误装造成的。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ol>
<li>首先卸载IBus<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载IBus</span></span><br><span class="line">sudo apt<span class="literal">-get</span> remove ibus</span><br><span class="line"><span class="comment"># 清除IBus配置</span></span><br><span class="line">sudo apt<span class="literal">-get</span> purge ibus</span><br></pre></td></tr></table></figure></li>
<li>如果曾经安装了Fcitx，彻底卸载掉<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载Fcixt及其组件</span></span><br><span class="line">sudo apt<span class="literal">-get</span> <span class="literal">-y</span>  remove *fcitx*</span><br><span class="line"><span class="comment"># 清除依赖包</span></span><br><span class="line">sudo apt<span class="literal">-get</span> autoremove</span><br></pre></td></tr></table></figure></li>
<li>最简化安装Fcitx<br>Ubuntu软件中心搜索fcitx，只安装<code>Fcitx</code>和<code>Fcitx配置</code>两项<br><img src="https://img-blog.csdnimg.cn/20191108204511178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li><a href="https://pinyin.sogou.com/linux/?r=pinyin">下载</a>安装搜狗拼音输入法<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo dpkg <span class="literal">-i</span> sougoupinyin_xxxxxxx_amd64.deb</span><br><span class="line"><span class="comment"># 修复依赖</span></span><br><span class="line">sudo apt<span class="literal">-get</span> install <span class="operator">-f</span></span><br></pre></td></tr></table></figure></li>
<li>更改输入法框架配置<blockquote>
<p>设置&gt;&gt;区域与语言&gt;&gt;管理已安装的语言</p>
</blockquote>
</li>
</ol>
<p>若提示语言不完整，则选择稍后提醒，若选择安装将会开始安装IBus</p>
<p><img src="https://img-blog.csdnimg.cn/20191108205749352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>在弹出的窗口内将键盘输入法系统从ibus改为fcitx<br><img src="https://img-blog.csdnimg.cn/20191108205951744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol start="6">
<li>重启<br>重新启动，而非注销<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo shutdown <span class="literal">-r</span> now</span><br></pre></td></tr></table></figure></li>
<li>配置搜狗拼音输入法<br>重启后，顶栏右边会出现一个小键盘图标，<img src="https://img-blog.csdnimg.cn/20191108210507108.png" alt="在这里插入图片描述"><br>点击，配置，或者直接搜索打开<code>fcitx配置</code></li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20191108210701996.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20191108210650615.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191108210817961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>移除搜狗五笔等，只保留这两项输入法<br>使用时，通过<code>shift</code>在两种输入法之间切换，<code>shift</code>是不能在搜狗输入法内切换中英文的。</p>
<p>通过这种方式安装，再没有出现过乱码现象，账户同步功能也可以正常使用</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04LTS下安装pip</title>
    <url>/2021/04/19/Ubuntu-20-04LTS%E4%B8%8B%E5%AE%89%E8%A3%85pip/</url>
    <content><![CDATA[<p><a href="https://www.itcoder.tech/posts/how-to-install-pip-on-ubuntu-20.04/">ITCoder</a></p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04/19.04/20.04安装笔记&amp;&amp;通用指南</title>
    <url>/2021/04/19/Ubuntu18-04-19-04-20-04%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0-%E9%80%9A%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p><em>&emsp;使用集成显卡安装Ubuntu能减少麻烦，很多Nvidia独立显卡设备无法成功安装使用Ubuntu的原因在于，Ubuntu默认使用Noveau显卡驱动造成的兼容性问题，本文从这一点出发，能解决大多数同类型显卡设备的问题。</em></p>
<span id="more"></span>&emsp;
<p><strong>设备配置：<br>&emsp;&emsp;微星 GL62M 7REX-1650CN<br>&emsp;&emsp;CPU  i7-7700HQ<br>&emsp;&emsp;NVIDIA GeForce GTX 1050Ti<br>&emsp;&emsp;128SSD+1THDD</strong><br>&emsp;</p>
<h2 id="1-制作U盘启动盘"><a href="#1-制作U盘启动盘" class="headerlink" title="1.制作U盘启动盘"></a>1.制作U盘启动盘</h2><p>&emsp;&emsp;建议使用<a href="https://www.balena.io/etcher/">Etcher</a>刷写Linux镜像。<br>&emsp;&emsp;Etcher是一款开源的跨平台的系统级刷写工具，支持Windows，Linux，Mac OS。<br>&emsp;&emsp;使用Etcher将Ubuntu 19.04 Desktop ISO刷写进U盘中<br>&emsp;</p>
<h2 id="2-安装系统"><a href="#2-安装系统" class="headerlink" title="2. 安装系统"></a>2. 安装系统</h2><h4 id="2-1安装前准备"><a href="#2-1安装前准备" class="headerlink" title="2.1安装前准备"></a>2.1安装前准备</h4><ul>
<li> 关闭安全启动：Secure Boot设置为<code>Disable</code></li>
<li>Startup-&gt;设置为Network Boot为<code>USB HDD</code></li>
<li>启动方式设置为<code>UEFI Only</code></li>
<li>在Startup Boot中将<code>USB HDD</code>设为第一启动项</li>
<li>F10保存所有设置并重启，进入U盘安装</li>
</ul>
<p>总的来讲，需要禁用安全启动以及在启动电脑时进行U盘启动即可,这一安装步骤仅供参考。</p>
<h4 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2. 安装"></a>2.2. 安装</h4><p> 由于安装时缺省使用Canonical提供的Nouveau显卡驱动，这个驱动在很多机器上存在兼容性问题，易卡死在Ubuntu安装界面，因此，首先需要禁用Nouveau，使用机器自带的集成显卡进入安装程序，并在Ubuntu系统内安装并启用Nvidia显卡驱动</p>
<ul>
<li>插入U盘，启动电脑，进入grub界面，光标移动到<code>Install Ubuntu</code>条目，键盘按<code>e</code>键进入编辑模式，在”quite splash”后先空格，再键入”nomodeset”，按F10保存，进入Ubuntu19.04安装系统<h4 id="2-3-分区方案"><a href="#2-3-分区方案" class="headerlink" title="2.3. 分区方案"></a>2.3. 分区方案</h4></li>
<li>本人安装模式为Ubuntu单系统，128SSD+1THDD，8G+8G RAM双通道</li>
<li> /swap交换空间&emsp;16G(至少为内存的1倍)&ensp;SSD;</li>
<li>/boot &emsp;500MB&ensp;SSD</li>
<li>/EFI &emsp; 500MB&ensp;SSD</li>
<li>/ &emsp; &emsp; 剩余SSD</li>
<li>/home&emsp;&emsp;1T&ensp;HDD<h4 id="2-3-双系统"><a href="#2-3-双系统" class="headerlink" title="2.3. 双系统"></a>2.3. 双系统</h4>若是Windows + Ubuntu 双系统安装，重新启动后，将进入grub引导界面：选中第一个启动选项<code>Ubuntu</code>,按<code>e</code>进入编辑模式，找到”quite splash”，删除其后的一小段文字，空格，键入”nomodeset”，F10保存，进入Ubuntu。<br>若为单系统安装，请忽略此条目。<br>&emsp;<h4 id="3-禁用Nouveau"><a href="#3-禁用Nouveau" class="headerlink" title="3.禁用Nouveau"></a>3.禁用Nouveau</h4>重启后进入登录界面，不要登录，<code>Ctrl+Alt+F2/F3/F4...</code>从图形化界面切换到文本界面（<code>Ctrl+Alt+F1</code>从文本界面切换到图形化界面），输入命令：<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo nano  /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>
在打开的文件末尾输入”blacklist nouveau” ,<code>Ctrl+x</code>退出,键入<code>y</code>确定更改,回车，返回到了Terminal，并输入：sudo update-initramfs -u使修改生效以禁用Nouveau驱动，然后重启。<br>&emsp;<h2 id="4-安装Nvidia驱动"><a href="#4-安装Nvidia驱动" class="headerlink" title="4.安装Nvidia驱动"></a>4.安装Nvidia驱动</h2><h4 id="emsp-4-1-自动安装驱动"><a href="#emsp-4-1-自动安装驱动" class="headerlink" title="&emsp;4.1 自动安装驱动"></a>&emsp;4.1 自动安装驱动</h4></li>
<li>找到并打开<code>软件和更新</code>程序，在附加驱动页面，选择第一个选项，<code>应用更改</code>，等待下载安装完毕<br><img src="https://img-blog.csdnimg.cn/20191001095959477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="软件和更新"><h4 id="4-2-手动安装驱动"><a href="#4-2-手动安装驱动" class="headerlink" title="4.2 手动安装驱动"></a>4.2 手动安装驱动</h4>到<a href="https://www.nvidia.com/Download/index.aspx?lang=cn">NVIDIA驱动程序官网</a>，根据显卡的具体型号查找安装包，下载后 sudo chmod 777 xxx.run 给予权限，运行安装,安装过程中会有一些问题，自行查询。<br><img src="https://img-blog.csdnimg.cn/20191017181708295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&emsp;</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04 Mac主题美化</title>
    <url>/2021/04/19/Ubuntu18-04-Mac%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前总觉得原主题就挺好，看了一些美化教程后自然而然就香了起来，下面是效果图</p>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/20191213203229935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="美化准备"><a href="#美化准备" class="headerlink" title="美化准备"></a>美化准备</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install gnome<span class="literal">-tweaks</span></span><br></pre></td></tr></table></figure>
<p>安装后打开<strong>Tweaks</strong>，在<strong>拓展栏</strong>启用<code>Ubuntu appindicators</code>和<code>Ubuntu dock</code>,并在<strong>窗口栏</strong>修改<code>标题栏按钮</code>的位置,其他的一些配置根据个人喜好就行<img src="https://img-blog.csdnimg.cn/20191213203418757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191213205443523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是如果需要对<strong>Shell</strong>进行美化，则还需要安装一个拓展</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install gnome<span class="literal">-shell</span><span class="literal">-extensions</span></span><br></pre></td></tr></table></figure>
<p>打开<strong>Tweaks</strong>在<strong>拓展栏</strong>启用<code>User themes</code><br>&emsp;</p>
<h2 id="正式美化"><a href="#正式美化" class="headerlink" title="正式美化"></a>正式美化</h2><h3 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h3><p>在<a href="https://www.pling.com/browse/cat/135/ord/rating/">这里</a>找喜欢的主题,本人用的是<a href="https://www.pling.com/p/1275087/">McMojave</a><br>下载解压tar.xz包后,将归档文件夹复制到**/usr/share/themes**</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> <span class="literal">-r</span> xxxxx /usr/share/themes</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2019121321042740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>Tweaks &gt;&gt; 外观 &gt;&gt; 应用程序</strong>,启用主题美化<br>&emsp;</p>
<h3 id="Shell美化"><a href="#Shell美化" class="headerlink" title="Shell美化"></a>Shell美化</h3><p><strong>Tweaks &gt;&gt; 外观 &gt;&gt; Shell</strong>,启用Shell美化<br>&emsp;</p>
<h3 id="图标美化"><a href="#图标美化" class="headerlink" title="图标美化"></a>图标美化</h3><p>在<a href="https://www.pling.com/s/Gnome/browse/cat/132/order/latest/">这里</a>找喜欢的图标包,本人用的是<a href="https://www.pling.com/s/Gnome/p/1210856">Mcjave CT icons</a><br>下载解压tar.xz包后,将归档文件夹复制到**/usr/share/icons**</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> <span class="literal">-r</span> xxxxx /usr/share/icons</span><br></pre></td></tr></table></figure>
<p><strong>Tweaks &gt;&gt; 外观 &gt;&gt; 图标</strong>,替换图标<br>&emsp;</p>
<h3 id="Dash-to-Dock"><a href="#Dash-to-Dock" class="headerlink" title="Dash to Dock"></a>Dash to Dock</h3><p>在<strong>Ubuntu软件</strong>中搜索安装<code>Dash to Dock</code>,设置自定义<br><img src="https://img-blog.csdnimg.cn/20191213211948155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191213212123894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&emsp;</p>
<h3 id="Terminal美化"><a href="#Terminal美化" class="headerlink" title="Terminal美化"></a>Terminal美化</h3><p>这里只改变了窗口的透明度,其他的可自行调整<br><img src="https://img-blog.csdnimg.cn/20191213212257751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结束</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04/20.04LTS实时监控网速、CPU和内存</title>
    <url>/2021/04/19/Ubuntu18-04-20-04LTS%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%E7%BD%91%E9%80%9F%E3%80%81CPU%E5%92%8C%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install indicator-sysmonitor</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">indicator-sysmonitor &amp;</span><br></pre></td></tr></table></figure>
<h5 id="后台挂起"><a href="#后台挂起" class="headerlink" title="后台挂起"></a>后台挂起</h5><p><code>Ctrl+D</code>后台运行indicator-sysmonitor。</p>
<h5 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h5><p>右键标题栏上图标，首选项，在弹出的界面选中<code>Run on Startup</code><br>在高级可以自定义显示的内容。</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04安装使用jsoncpp库</title>
    <url>/2021/04/19/Ubuntu18-04%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8jsoncpp%E5%BA%93/</url>
    <content><![CDATA[<p>调用百度的API时为C++ SDK配置jsoncpp依赖，可用于C++解析json文件</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libjsoncpp-dev</span><br></pre></td></tr></table></figure>
<p> 库的头文件安装在/usr/include/jsoncpp中, 库API文档默认在/usr/share/doc/libjsoncpp-dev/jsoncpp-api-html/目录下 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jsoncpp/json/json.h&gt;</span> </span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C++</tag>
        <tag>图像识别</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04.2 amd64编译安装libcurl支持https[转]</title>
    <url>/2021/04/19/Ubuntu18-04-2-amd64%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85libcurl%E6%94%AF%E6%8C%81https-%E8%BD%AC/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/areful/p/11306651.html">原文地址</a></p>
<p>1.准备工作，安装ssl库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssl</span><br><span class="line">sudo apt-get install libssl-dev</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>2.下载libcurl源代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://curl.haxx.se/download/curl-7.65.3.tar.xz</span><br></pre></td></tr></table></figure>
<p>3.解压并进入源代码目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf curl-7.65.3.tar.xz</span><br><span class="line"><span class="built_in">cd</span> curl-7.65.3</span><br></pre></td></tr></table></figure>
<p>4.配置编译选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure  --prefix=/usr  													\</span><br><span class="line">           				--disable-static 												\</span><br><span class="line">          			    --enable-threaded-resolver						\</span><br><span class="line">       			        --with-ca-path=/etc/ssl/certs</span><br></pre></td></tr></table></figure>
<p>5.编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<p>6.安装（需要root权限）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install &amp;&amp;</span><br><span class="line"></span><br><span class="line">rm -rf docs/examples/.deps &amp;&amp;</span><br><span class="line"></span><br><span class="line">find docs \( -name Makefile\* -o -name \*.1 -o -name \*.3 \) -<span class="built_in">exec</span> rm &#123;&#125; \; &amp;&amp;</span><br><span class="line"></span><br><span class="line">install -v -d -m755 /usr/share/doc/curl-7.65.3 &amp;&amp;</span><br><span class="line">cp -v -R docs/*     /usr/share/doc/curl-7.65.3</span><br></pre></td></tr></table></figure>
<p>至此，编译安装完成。</p>
<p>&emsp;<br>&emsp;<br>写代码测试一下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curl/curl.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CURL *curl;</span><br><span class="line">  CURLcode res;</span><br><span class="line"> </span><br><span class="line">  curl_global_init(CURL_GLOBAL_DEFAULT);</span><br><span class="line"> </span><br><span class="line">  curl = curl_easy_init();</span><br><span class="line">  <span class="keyword">if</span>(curl) &#123;</span><br><span class="line">    curl_easy_setopt(curl, CURLOPT_URL, <span class="string">&quot;https://www.baidu.com/&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* Perform the request, res will get the return code */</span></span><br><span class="line">    res = curl_easy_perform(curl);</span><br><span class="line">    <span class="comment">/* Check for errors */</span></span><br><span class="line">    <span class="keyword">if</span>(res != CURLE_OK)</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;curl_easy_perform() failed: %s\n&quot;</span>,</span><br><span class="line">              curl_easy_strerror(res));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* always cleanup */</span></span><br><span class="line">    curl_easy_cleanup(curl);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  curl_global_cleanup();</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc hello_https.c -l curl -o hello_https</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./hello_https</span><br></pre></td></tr></table></figure>

<p>运行结果截图：<br><img src="https://img-blog.csdnimg.cn/20191031104423437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 附 自定义回调处理响应数据代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curl/curl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">size_t</span> <span class="title">write_data</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> nmemb, <span class="keyword">void</span> *stream)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stream == <span class="literal">NULL</span>) </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, ptr);</span><br><span class="line">    <span class="keyword">return</span> size * nmemb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CURL *curl;</span><br><span class="line">  CURLcode res;</span><br><span class="line"> </span><br><span class="line">  curl_global_init(CURL_GLOBAL_DEFAULT);</span><br><span class="line"> </span><br><span class="line">  curl = curl_easy_init();</span><br><span class="line">  <span class="keyword">if</span>(curl) &#123;</span><br><span class="line">    curl_easy_setopt(curl, CURLOPT_URL, <span class="string">&quot;https://www.baidu.com/&quot;</span>);</span><br><span class="line">    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_data);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* Perform the request, res will get the return code */</span></span><br><span class="line">    res = curl_easy_perform(curl);</span><br><span class="line">    <span class="comment">/* Check for errors */</span></span><br><span class="line">    <span class="keyword">if</span>(res != CURLE_OK)</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;curl_easy_perform() failed: %s\n&quot;</span>,</span><br><span class="line">              curl_easy_strerror(res));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* always cleanup */</span></span><br><span class="line">    curl_easy_cleanup(curl);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  curl_global_cleanup();</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>图像识别</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu20.04LTS安装Mysql8.0.21[转]</title>
    <url>/2021/04/19/Ubuntu20-04LTS%E5%AE%89%E8%A3%85Mysql8-0-21/</url>
    <content><![CDATA[<p><a href="https://ywnz.com/linuxysjk/4123.html">原文地址</a></p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu20.04LTS安装OpenJDK8/Oracle JDK8</title>
    <url>/2021/04/19/Ubuntu20-04LTS%E5%AE%89%E8%A3%85OpenJDK8-Oracle-JDK8/</url>
    <content><![CDATA[<blockquote>
<p>安装Java8为Minecraft服务器和客户端提供支持<br>@<a href>TOC</a></p>
</blockquote>
<h1 id="OpenJDK"><a href="#OpenJDK" class="headerlink" title="OpenJDK"></a>OpenJDK</h1><p>为服务器安装不包含OpenJFX的OpenJDK<br>安装过程只有一行代码</p>
<span id="more"></span>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk<span class="literal">-8</span><span class="literal">-jdk</span></span><br></pre></td></tr></table></figure>
<p>查看是否安装成功：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java <span class="literal">-version</span></span><br></pre></td></tr></table></figure>
<p>之后单独安装OpenJFX后MC客户端仍然报错，建议客户端安装Oracle JDK</p>
<h1 id="Oracle-JDK"><a href="#Oracle-JDK" class="headerlink" title="Oracle JDK"></a>Oracle JDK</h1><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">Oracle JDK8</a><br>根据个人情况下载，本人是x64笔记本，用的这个，选错了的话后续过程会报错，之前脑抽选成了arm64然后gg了<br><img src="https://img-blog.csdnimg.cn/2020072819453826.png" alt="在这里插入图片描述"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>解压<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /usr/lib/jvm</span><br><span class="line">sudo tar <span class="literal">-zxvf</span> jdk<span class="literal">-8u261</span><span class="literal">-linux</span><span class="literal">-x64</span>.gz <span class="literal">-C</span> /usr/lib/jvm</span><br></pre></td></tr></table></figure></li>
<li>配置环境变量<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure>
在文件末尾追加内容：<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Oracle JDK8 Envirenment</span></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.<span class="number">8.0</span>_261  <span class="comment">## 目录要换成自己解压的目录</span></span><br><span class="line">export JRE_HOME=<span class="variable">$</span>&#123;JAVA_HOME&#125;/jre  </span><br><span class="line">export CLASSPATH=.:<span class="variable">$</span>&#123;JAVA_HOME&#125;/lib:<span class="variable">$</span>&#123;JRE_HOME&#125;/lib  </span><br><span class="line">export PATH=<span class="variable">$</span>&#123;JAVA_HOME&#125;/bin:<span class="variable">$PATH</span>  </span><br></pre></td></tr></table></figure>
使环境变量立即生效：<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>
查看是否安装成功：<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java <span class="literal">-version</span>	<span class="comment">## 如果前面选错了压缩包，这里会报错</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下Windows文件名乱码[转]</title>
    <url>/2021/04/19/Ubuntu%E4%B8%8BWindows%E6%96%87%E4%BB%B6%E5%90%8D%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/52f4df9dd4c8">原文链接</a></p>
<p>把一些Windows上创建的文件发送到Ubuntu后，这些文件（文件夹、压缩包等）的文件名会乱码，原因为windows下的文件名以GBK编码，而Ubuntu下的文件 名为utf-8编码。</p>
<span id="more"></span>

<h1 id="convmv"><a href="#convmv" class="headerlink" title="convmv"></a>convmv</h1><p><code>convmv</code>就是更改文件名编码方式的一个工具。比如</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo convmv <span class="operator">-f</span> gbk <span class="literal">-t</span> utf<span class="literal">-8</span> <span class="literal">-r</span> –notest /home</span><br></pre></td></tr></table></figure>

<p>就是将/home目录下原来文件名是gbk编码方式的全部改为utf-8格式的。这里 -f 后面为原来的编码方式，-t 后面是要更改为的编码方式， -r 表示递归形式处理这个目录下面的所有文件， –notest 表示马上执行，而不是仅仅测试而已。另外这命令好像要root才能执行，因此要加上 sudo。</p>
<h1 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h1><p><code>iconv</code>是更改文件编码方式的一个工具：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo iconv <span class="operator">-f</span> gbk <span class="literal">-t</span> utf<span class="literal">-8</span> <span class="literal">-o</span> outfile infile</span><br></pre></td></tr></table></figure>
<p>-f为原来的编码方式，-t 为输出文件的编码方式， -o表示输出文件名，这利用outfile表示，最后跟上要更改编码方式的文件名sourcefile 。</p>
<p>很多时候用这两种方式也无法解决乱码问题，令人无奈</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下局域网内访问树莓派3B+---SSH,VNC,Filezilla</title>
    <url>/2021/04/19/Ubuntu%E4%B8%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E8%AE%BF%E9%97%AE%E6%A0%91%E8%8E%93%E6%B4%BE3B-SSH-VNC-Filezilla/</url>
    <content><![CDATA[<h2 id="1-树莓派开启VNC服务"><a href="#1-树莓派开启VNC服务" class="headerlink" title="1. 树莓派开启VNC服务"></a>1. 树莓派开启VNC服务</h2><p>因为本人有块显示器，故将树莓派连接键盘鼠标显示器，树莓派开机，打开终端，输入命令:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo raspi<span class="literal">-config</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/20191205125516966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选中<code>Interfacig Option</code>项，回车<br><img src="https://img-blog.csdnimg.cn/2019120512575512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选中<code>VNC</code>项，回车，等待安装启用完成，若VNC成功启动，则会在屏幕右上角出现VNC图标<br><img src="https://img-blog.csdnimg.cn/20191205125958956.png" alt="在这里插入图片描述"></p>
<h2 id="2-树莓派开启SSH服务"><a href="#2-树莓派开启SSH服务" class="headerlink" title="2. 树莓派开启SSH服务"></a>2. 树莓派开启SSH服务</h2><p>详细步骤和开启VNC服务相同，只是在<code>raspi-config</code>的次级菜单中要选中<code>SSH</code><br>或者在tf卡刷入系统之后，在<code>/boot</code>目录下新建<code>/ssh</code>空文件夹<br>Ubuntu内终端输入<code>ssh pi@树莓派的IP</code>，初始密码是<code>raspberry</code></p>
<h2 id="3-使用Filezilla连接树莓派"><a href="#3-使用Filezilla连接树莓派" class="headerlink" title="3. 使用Filezilla连接树莓派"></a>3. 使用Filezilla连接树莓派</h2><h6 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h6><pre><code>1.树莓派和Ubuntu设备处于同一局域网下
2.树莓派已开启SSH服务
3.已知树莓派当前IP
</code></pre>
<p>安装Filezilla：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install filezilla</span><br></pre></td></tr></table></figure>
<p>安装后打开，连接<br><img src="https://img-blog.csdnimg.cn/20191205130741840.png" alt="在这里插入图片描述"><br>主机：<code>sftps://</code>+<code>树莓派IP</code>，用户名和密码依树莓派的照实填写就好</p>
<h2 id="4-Shell下SSH连接树莓派"><a href="#4-Shell下SSH连接树莓派" class="headerlink" title="4. Shell下SSH连接树莓派"></a>4. Shell下SSH连接树莓派</h2><p>Ubuntu下打开终端，输入：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh pi<span class="selector-tag">@</span>树莓派IP地址</span><br></pre></td></tr></table></figure>
<p>比如这里我的IP是192.168.1.5<br><img src="https://img-blog.csdnimg.cn/20191205131352347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>连接树莓派成功后，键入<code>exit</code>可以断开连接：<br><img src="https://img-blog.csdnimg.cn/2019120513154890.png" alt="在这里插入图片描述"></p>
<h2 id="5-VNC连接树莓派"><a href="#5-VNC连接树莓派" class="headerlink" title="5. VNC连接树莓派"></a>5. VNC连接树莓派</h2><p>在Ubuntu上安装Raspberry官方推荐的跨平台解决方案——<a href="https://www.realvnc.com/en/connect/download/viewer/">RealVNC</a>，支持Windows，Linux，macOS等众多平台。</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Raspberry</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下禁用笔记本内置键盘</title>
    <url>/2021/04/19/Ubuntu%E4%B8%8B%E7%A6%81%E7%94%A8%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%86%85%E7%BD%AE%E9%94%AE%E7%9B%98/</url>
    <content><![CDATA[<h5 id="笔记本一直连着外接键盘，把书本放在内置键盘上总是造成误触，所以决定禁用内置键盘"><a href="#笔记本一直连着外接键盘，把书本放在内置键盘上总是造成误触，所以决定禁用内置键盘" class="headerlink" title="笔记本一直连着外接键盘，把书本放在内置键盘上总是造成误触，所以决定禁用内置键盘"></a>笔记本一直连着外接键盘，把书本放在内置键盘上总是造成误触，所以决定禁用内置键盘</h5><p>查看所有输出设备</p>
<span id="more"></span>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">xinput list</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20191231114452245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里本人内置键盘的ID是17<br>然后禁用</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">xinput <span class="built_in">set-prop</span> id <span class="string">&quot;Device Enabled&quot;</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20191231114834680.png" alt="在这里插入图片描述"><br>如果重新启用则将0改为1即可</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装WPS后报错：缺失字体[转]</title>
    <url>/2021/04/19/Ubuntu%E5%AE%89%E8%A3%85WPS%E5%90%8E%E6%8A%A5%E9%94%99%EF%BC%9A%E7%BC%BA%E5%A4%B1%E5%AD%97%E4%BD%93-%E8%BD%AC/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/dejunyang/article/details/81437632">原文地址</a></p>
<ol>
<li><p>问题描述：Linux 安装WPS后，启动报错  “系统缺失字体”</p>
</li>
<li><p>解决方法：</p>
<span id="more"></span></li>
</ol>
<p>2.1 下载字体：</p>
<pre><code>链接: https://pan.baidu.com/s/1yFg7nRafcdPYtnHJk38r1g 密码: 3xqf
</code></pre>
<p>2.2 解压：</p>
<pre><code>unzip wps-symbol-fonts.zip
</code></pre>
<p>2.3 进入解压目录：</p>
<pre><code>cd wps-symbol-fonts
</code></pre>
<p>2.4 将目录中的所有文件拷贝到/usr/share/fonts目录中：</p>
<pre><code>sudo cp * /usr/share/fonts
</code></pre>
<p>2.5 生成字体索引信息：</p>
<pre><code>sudo mkfontscale

sudo mkfontdir
</code></pre>
<p>2.5 运行fc-cache命令更新字体缓存：</p>
<pre><code>sudo fc-cache
</code></pre>
<p>2.6 重启wps即可，字体缺失的提示不再出现</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim简单配置</title>
    <url>/2021/04/19/Vim%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>总是折腾，每次重新配置vim重新写很麻烦，就在此做个备份</p>
<span id="more"></span>

<p>set autoindent “”自动缩进<br>set cindent “”以C语言的方式缩进<br>set shiftwidth=4 “”设置自动缩进的空格数量<br>set softtabstop=4 “”tab键的实际占有空格数，统一缩进<br>set tabstop=4 “”设置tab键的空格数</p>
<p>set cursorline “”突出当前行<br>syntax on “”语法高亮<br>set nu “”设置行号</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu终端内打开当前目录文件夹图形界面</title>
    <url>/2021/04/19/Ubuntu%E7%BB%88%E7%AB%AF%E5%86%85%E6%89%93%E5%BC%80%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%A4%B9%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<p>Ubuntu18.04中已经缺省支持在右键菜单中从当前目录打开终端，但是怎么通过终端打开当前目录的文件夹？<br>看了一些帖子，知道了可以通过<code>nautilus</code>命令解决</p>
<span id="more"></span>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认打开~/目录文件夹</span></span><br><span class="line">nautilus</span><br><span class="line"><span class="comment"># 打开当前目录文件</span></span><br><span class="line">nautilus ./</span><br><span class="line"><span class="comment"># 打开/usr/bin 目录文件夹</span></span><br><span class="line">nautilus /usr/bin</span><br></pre></td></tr></table></figure>
<p>但是很快我就发现了另一个更方便的解决方案——<code>xdg-open</code>!<br>之前一直用<code>xdg-open</code>命令打开目录、各种文件、网址等等，却没想到用它打开文件路径</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">xdg<span class="literal">-open</span> ./</span><br><span class="line">xdg<span class="literal">-open</span> a.jpg</span><br><span class="line">xdg<span class="literal">-open</span>  b.odt</span><br><span class="line">xdg<span class="literal">-open</span> http://www.google.com</span><br></pre></td></tr></table></figure>
<p><code>gnome-open</code>实现以上需求</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>firt_blog</title>
    <url>/2021/04/01/firt-blog/</url>
    <content><![CDATA[<p>I’m so happy to build and own the first blog by myself  : )! And thanks to Hexo help me achieve this plan !</p>
]]></content>
  </entry>
  <entry>
    <title>MySQL安全配置向导mysql_secure_installation详解</title>
    <url>/2021/04/19/MySQL%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E5%90%91%E5%AF%BCmysql-secure-installation%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p><a href="https://www.jb51.net/article/47727.htm">原文地址</a></p>
<p>安装完mysql-server 会提示可以运行mysql_secure_installation。运行mysql_secure_installation会执行几个设置：</p>
<span id="more"></span>

<p>  a)为root用户设置密码<br>  b)删除匿名账号<br>  c)取消root用户远程登录<br>  d)删除test库和对test库的访问权限<br>  e)刷新授权表使修改生效</p>
<p>通过这几项的设置能够提高mysql库的安全。建议生产环境中mysql安装这完成后一定要运行一次mysql_secure_installation，详细步骤请参看下面的命令:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">server1</span> ~]<span class="comment"># mysql_secure_installation</span></span><br><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED <span class="keyword">FOR</span> ALL MySQL</span><br><span class="line">SERVERS <span class="keyword">IN</span> PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"><span class="keyword">In</span> order to log into MySQL to secure it, we<span class="string">&#x27;ll need the current</span></span><br><span class="line"><span class="string">password for the root user. If you&#x27;</span>ve just installed MySQL, and</span><br><span class="line">you haven<span class="string">&#x27;t set the root password yet, the password will be blank,</span></span><br><span class="line"><span class="string">so you should just press enter here.</span></span><br><span class="line"><span class="string">Enter current password for root (enter for none):   																						初次运行直接回车</span></span><br><span class="line"><span class="string">OK, successfully used password, moving on…</span></span><br><span class="line"><span class="string">Setting the root password ensures that nobody can log into the MySQL</span></span><br><span class="line"><span class="string">root user without the proper authorisation.</span></span><br><span class="line"><span class="string">Set root password? [Y/n]																			是否设置root用户密码，输入y并回车或直接回车</span></span><br><span class="line"><span class="string">New password: 																																					设置root用户的密码</span></span><br><span class="line"><span class="string">Re-enter new password: 																															再输入一次你设置的密码</span></span><br><span class="line"><span class="string">Password updated successfully!</span></span><br><span class="line"><span class="string">Reloading privilege tables..</span></span><br><span class="line"><span class="string">… Success!</span></span><br><span class="line"><span class="string">By default, a MySQL installation has an anonymous user, allowing anyone</span></span><br><span class="line"><span class="string">to log into MySQL without having to have a user account created for</span></span><br><span class="line"><span class="string">them. This is intended only for testing, and to make the installation</span></span><br><span class="line"><span class="string">go a bit smoother. You should remove them before moving into a</span></span><br><span class="line"><span class="string">production environment.</span></span><br><span class="line"><span class="string">Remove anonymous users? [Y/n] 												 是否删除匿名用户,生产环境建议删除，所以直接回车</span></span><br><span class="line"><span class="string">… Success!</span></span><br><span class="line"><span class="string">Normally, root should only be allowed to connect from &#x27;</span>localhost<span class="string">&#x27;. This</span></span><br><span class="line"><span class="string">ensures that someone cannot guess at the root password from the network.</span></span><br><span class="line"><span class="string">Disallow root login remotely? [Y/n] 						是否禁止root远程登录,根据自己的需求选择Y/n并回车,建议禁止</span></span><br><span class="line"><span class="string">… Success!</span></span><br><span class="line"><span class="string">By default, MySQL comes with a database named &#x27;</span>test<span class="string">&#x27; that anyone can</span></span><br><span class="line"><span class="string">access. This is also intended only for testing, and should be removed</span></span><br><span class="line"><span class="string">before moving into a production environment.</span></span><br><span class="line"><span class="string">Remove test database and access to it? [Y/n] 																	 是否删除test数据库,直接回车</span></span><br><span class="line"><span class="string">- Dropping test database…</span></span><br><span class="line"><span class="string">… Success!</span></span><br><span class="line"><span class="string">- Removing privileges on test database…</span></span><br><span class="line"><span class="string">… Success!</span></span><br><span class="line"><span class="string">Reloading the privilege tables will ensure that all changes made so far</span></span><br><span class="line"><span class="string">will take effect immediately.</span></span><br><span class="line"><span class="string">Reload privilege tables now? [Y/n] 																							是否重新加载权限表，直接回车</span></span><br><span class="line"><span class="string">… Success!</span></span><br><span class="line"><span class="string">Cleaning up…</span></span><br><span class="line"><span class="string">All done! If you&#x27;</span>ve completed all of the above steps, your MySQL</span><br><span class="line">installation should now be secure.</span><br><span class="line">Thanks <span class="keyword">for</span> <span class="keyword">using</span> MySQL!</span><br><span class="line">[<span class="type">root</span>@<span class="type">server1</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows安装GCC</title>
    <url>/2021/04/19/Windows%E5%AE%89%E8%A3%85GCC/</url>
    <content><![CDATA[<blockquote>
<p>写这篇文章的初心是因为实验室的普及授课，要求提前安装好gcc，但是受限于某科技大学大学生们的水平，本人只好写一篇细到不能再细的教程<br>本文大体上和别的教程都差不多，有很多借鉴重合的地方</p>
</blockquote>
<span id="more"></span>

<p>@<a href="Windows%E4%B8%8B%E5%AE%89%E8%A3%85gcc">TOC</a></p>
<h1 id="安装MinGW"><a href="#安装MinGW" class="headerlink" title="安装MinGW"></a>安装MinGW</h1><p><a href="https://sourceforge.net/projects/mingw/files/">下载链接</a></p>
<p>双击安装程序，选择合适的安装目录，并记下这个安装目录</p>
<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p> <em><strong>选择计算机 –&gt; 属性 –&gt; 高级系统设置 –&gt; 环境变量</strong></em></p>
<p> 在下方的<code>系统变量</code>栏中找到 <code>Path</code> 变量，单击<code>Path</code>条目，单击右下角的<code>编辑</code>按钮<br> <img src="https://img-blog.csdnimg.cn/20201015143953210.png#pic_center" alt="在这里插入图片描述"><br>在新弹出的窗口内，单击右边的<code>新建</code>按钮，将之前<strong>mingw的安装目录路径</strong>写入，比如我的路径就是<code>C:\MinGW\bin</code><br><img src="https://img-blog.csdnimg.cn/20201015144205537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>打开<code>cmd/powershell</code>，输入<code>mingw-get</code>并回车，弹出以下窗口，表示环境变量配置成功</p>
<h1 id="安装GCC"><a href="#安装GCC" class="headerlink" title="安装GCC"></a>安装GCC</h1><p>打开<code>cmd\powershell</code>，输入<code>mingw-get install gcc</code>并回车即可安装gcc，安装g++同理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mingw-get install gcc</span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在任意文件夹下写好一个c源代码文件，如<code>hi.c</code>在该文件夹空白处，按住<code>shift</code>并鼠标右键，点击右键菜单中的选项，打开<code>powershell</code>,输入以下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc hi.c -o hi.exe</span><br></pre></td></tr></table></figure>
<p>即可编译c源代码为可执行文件</p>
]]></content>
      <tags>
        <tag>Gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>python调用fswbcam使用USB摄像头实现抓拍</title>
    <url>/2021/04/19/python%E8%B0%83%E7%94%A8fswbcam%E4%BD%BF%E7%94%A8USB%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E7%8E%B0%E6%8A%93%E6%8B%8D/</url>
    <content><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>本人在树莓派3B+上做图像识别的功能，由于手头仅有USB摄像头，便决定使用fswebcam进行抓拍，测试的环境是Ubuntu Desktop 18.04和某杂牌USB摄像头</p>
<span id="more"></span>&emsp;

<h2 id="1-安装fswebcam："><a href="#1-安装fswebcam：" class="headerlink" title="1.安装fswebcam："></a>1.安装fswebcam：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install fswebcam</span><br></pre></td></tr></table></figure>

<h2 id="2-查看信息："><a href="#2-查看信息：" class="headerlink" title="2.查看信息："></a>2.查看信息：</h2><p>查看设备信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls /dev</span><br></pre></td></tr></table></figure>
<p>查看摄像头相关信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsusb</span><br></pre></td></tr></table></figure>

<h2 id="3-拍照测试："><a href="#3-拍照测试：" class="headerlink" title="3.拍照测试："></a>3.拍照测试：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fswebcam -d /dev/video0 --no-banner -r 720x480 -S 10 ~/image.jpg</span><br></pre></td></tr></table></figure>
<p>-d表示调用的设备，-no-banner不加会字体报错,-r是图片分辨率信息，-S表示延时拍照，参数10的实际延时远小于10s</p>
<p>在实际测试中发现，如果延时参数小于10,拍出的图片总是模糊或全是白色，拍照效果极差，原因未知，或许是使用的USB摄像头的问题，这一点以后有空会再测试补充的</p>
<p>在Terminal中执行完毕此命令，将在~/文件夹下生成一个图像文件image.jpg</p>
<h2 id="4-python调用fswebcam"><a href="#4-python调用fswebcam" class="headerlink" title="4.python调用fswebcam"></a>4.python调用fswebcam</h2><p>新建并编写代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim camera.py</span><br></pre></td></tr></table></figure>
<p>文件内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">os.system(<span class="string">&quot;fswebcam --no-banner -r 1080x720 -S 10 image.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>执行文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python camera.py</span><br></pre></td></tr></table></figure>

<p>命令执行完毕，将在当前目录生成image.jpg文件</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>qbittorrent+树莓派3B+制作bt下载机</title>
    <url>/2021/04/19/qbittorrent-%E6%A0%91%E8%8E%93%E6%B4%BE3B-%E5%88%B6%E4%BD%9Cbt%E4%B8%8B%E8%BD%BD%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="一、刷入系统"><a href="#一、刷入系统" class="headerlink" title="一、刷入系统"></a>一、刷入系统</h2><p>为了节省资源，系统选择的是没有图形界面的<code>raspbian-lite</code><br>使用<code>BalenaEtcher</code>刷入镜像后，在<code>/boot</code>目录新建<code>ssh</code>文件夹，用于ssh连接树莓派</p>
<span id="more"></span>

<p>如果需要省略低电压警告，在/boot分区的config.txt问价内写入<code>avoid_warnings=1</code>即可</p>
<h2 id="二、ssh连接"><a href="#二、ssh连接" class="headerlink" title="二、ssh连接"></a>二、ssh连接</h2><p>由于本人是通过网线直连路由器，很简单就能获得树莓派的IP地址<br>在Ubuntu内打开终端，使用ssh连接树莓派</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh pi<span class="selector-tag">@</span>树莓派IP</span><br></pre></td></tr></table></figure>
<p>树莓派初始用户名<code>pi</code>，密码<code>raspberry</code></p>
<h2 id="三、-安装qbittorrent"><a href="#三、-安装qbittorrent" class="headerlink" title="三、 安装qbittorrent"></a>三、 安装qbittorrent</h2><ol>
<li>换清华源</li>
</ol>
<p><a href="https://mirror.tuna.tsinghua.edu.cn/help/raspbian/">清华开源软件镜像站</a></p>
<ol start="2">
<li>安装qbittorrent<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装qbittorent</span></span><br><span class="line">sudo apt install qbittorrent<span class="literal">-nox</span></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">qbittorrent<span class="literal">-nox</span> <span class="literal">-d</span></span><br></pre></td></tr></table></figure>
<h2 id="四、-Web远程控制"><a href="#四、-Web远程控制" class="headerlink" title="四、 Web远程控制"></a>四、 Web远程控制</h2>在Ubuntu中打开浏览器，地址栏输入<code>树莓派IP：8080</code>（qbittorent默认端口为8080）<br>qbittorrent初始用户名<code>admin</code>，初始密码<code>adminadmin</code></li>
</ol>
<p>开始使用吧！</p>
<p>密码端口等都是可以自定义修改的，本人也准备找个闲置的u盘/硬盘接到树莓派上，以后就可以在低耗电的情况下</p>
<h2 id="五、-调整分辨率"><a href="#五、-调整分辨率" class="headerlink" title="五、 调整分辨率"></a>五、 调整分辨率</h2><p><a href="https://www.cnblogs.com/dongxiaodong/p/9682311.html">调整VNC连接中图像显示的分辨率</a></p>
]]></content>
      <tags>
        <tag>Raspberry</tag>
        <tag>Raspbian</tag>
        <tag>Bt</tag>
      </tags>
  </entry>
  <entry>
    <title>初次使用Qt时遇到的几个坑</title>
    <url>/2021/04/19/%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8Qt%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9D%91/</url>
    <content><![CDATA[<h2 id="1-error-cannot-find-lGL"><a href="#1-error-cannot-find-lGL" class="headerlink" title="1.　error:cannot find -lGL"></a>1.　error:cannot find -lGL</h2><p>原因分析: 在已经安装openGL库的前提下出现这种错误，是因为libGL没有正确链接:</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sun@sun-msi:/opt/busybox-1.31.0$ locate libGL</span><br><span class="line">/snap/gnome-3-28-1804/91/usr/lib/x86_64-linux-gnu/libGL.so.1</span><br><span class="line">/snap/gnome-3-28-1804/91/usr/lib/x86_64-linux-gnu/libGL.so.1.0.0</span><br><span class="line">/snap/gnome-3-28-1804/91/usr/lib/x86_64-linux-gnu/libGLX.so.0</span><br><span class="line">/snap/gnome-3-28-1804/91/usr/lib/x86_64-linux-gnu/libGLX.so.0.0.0</span><br><span class="line">/snap/gnome-3-28-1804/91/usr/lib/x86_64-linux-gnu/libGLX_indirect.so.0</span><br><span class="line">/snap/gnome-3-28-1804/91/usr/lib/x86_64-linux-gnu/libGLX_mesa.so.0</span><br><span class="line">/snap/gnome-3-28-1804/91/usr/lib/x86_64-linux-gnu/libGLX_mesa.so.0.0.0</span><br><span class="line">/snap/gnome-3-28-1804/91/usr/lib/x86_64-linux-gnu/libGLdispatch.so.0</span><br><span class="line">/snap/gnome-3-28-1804/91/usr/lib/x86_64-linux-gnu/libGLdispatch.so.0.0.0</span><br><span class="line">/usr/lib/libGL.so.1</span><br><span class="line">/usr/lib/i386-linux-gnu/libGL.so.1</span><br><span class="line">/usr/lib/i386-linux-gnu/libGL.so.1.0.0</span><br><span class="line">/usr/lib/i386-linux-gnu/libGLU.so.1</span><br><span class="line">/usr/lib/i386-linux-gnu/libGLU.so.1.3.1</span><br><span class="line">/usr/lib/i386-linux-gnu/libGLX.so.0</span><br><span class="line">/usr/lib/i386-linux-gnu/libGLX.so.0.0.0</span><br><span class="line">/usr/lib/i386-linux-gnu/libGLX_indirect.so.0</span><br><span class="line">/usr/lib/i386-linux-gnu/libGLX_mesa.so.0</span><br><span class="line">/usr/lib/i386-linux-gnu/libGLX_mesa.so.0.0.0</span><br><span class="line">/usr/lib/i386-linux-gnu/libGLdispatch.so.0</span><br><span class="line">/usr/lib/i386-linux-gnu/libGLdispatch.so.0.0.0</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libGL.la</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libGL.so</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libGL.so.1</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libGL.so.1.7.0</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libGLESv1_CM.so</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libGLESv1_CM.so.1</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libGLESv1_CM.so.1.0.0</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libGLESv1_CM.so.1.2.0</span><br></pre></td></tr></table></figure>
<p>这里有很多libGL的路径，随便找一个链接就可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sun@sun-msi:/opt/busybox-1.31.0$ sudo ln -s /usr/lib/x86_64-linux-gnu/libGL.so.1</span><br></pre></td></tr></table></figure>
<h2 id="２．qmake-could-not-exec-＇-usr-lib-x86-64-linux-gnu-qt5-bin-qmake＇-No-such-file-or-directory"><a href="#２．qmake-could-not-exec-＇-usr-lib-x86-64-linux-gnu-qt5-bin-qmake＇-No-such-file-or-directory" class="headerlink" title="２．qmake: could not exec ＇/usr/lib/x86_64-linux-gnu/qt5/bin/qmake＇: No such file or directory"></a>２．qmake: could not exec ＇/usr/lib/x86_64-linux-gnu/qt5/bin/qmake＇: No such file or directory</h2><p>原因：qtchooser默认选择路径中没有指向qmake路径</p>
<p>修改配置文件，修改为Qt路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sun@sun-msi:~$ sudo vim /usr/lib/x86_64-linux-gnu/qt-default/qtchooser/default.conf</span><br></pre></td></tr></table></figure>
<p>将default.conf的内容删除并键入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/Qt5.13.1/5.13.1/gcc_64/bin</span><br><span class="line">/opt/Qt5.13.1/5.13.1</span><br></pre></td></tr></table></figure>
<p>保存退出后，进行测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sun@sun-msi:~$ qmake -v</span><br><span class="line">QMake version 3.1</span><br><span class="line">Using Qt version 5.13.1 <span class="keyword">in</span> /opt/Qt5.13.1/5.13.1/gcc_64/lib</span><br></pre></td></tr></table></figure>
<p>配置成功</p>
<h2 id="3-fatal-error-QApplication-No-such-file-or-directory"><a href="#3-fatal-error-QApplication-No-such-file-or-directory" class="headerlink" title="3. fatal error: QApplication:No such file or directory"></a>3. fatal error: QApplication:No such file or directory</h2><p>在使用make构建程序时报错<br><img src="https://img-blog.csdnimg.cn/20191028162701793.png" alt="在这里插入图片描述"><br>原因：Qt5将大部分桌面部件移到了Qt Widgets模块中，即QApplication已经从原来的&lt;QtGui/QApplication&gt;移动到&lt;QtWidgets/QApplication&gt;</p>
<p>解决方案：修改.pro文件,加入一段代码:<code>greaterThan(QT_MAJOR_VERSION, 4): QT += widgets</code><br><img src="https://img-blog.csdnimg.cn/20191028163900357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>摩摩餐厅菜品数据简单归档与升级简要分析</title>
    <url>/2021/04/23/%E6%91%A9%E6%91%A9%E9%A4%90%E5%8E%85%E8%8F%9C%E5%93%81%E6%95%B0%E6%8D%AE%E7%AE%80%E5%8D%95%E5%BD%92%E6%A1%A3%E4%B8%8E%E5%8D%87%E7%BA%A7%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="餐厅玩法方向"><a href="#餐厅玩法方向" class="headerlink" title="餐厅玩法方向"></a>餐厅玩法方向</h1><h2 id="五星厨神"><a href="#五星厨神" class="headerlink" title="五星厨神"></a>五星厨神</h2><h3 id="1-5"><a href="#1-5" class="headerlink" title="1~5"></a>1~5</h3><h3 id="6-34"><a href="#6-34" class="headerlink" title="6~34"></a>6~34</h3><h3 id="35-47"><a href="#35-47" class="headerlink" title="35~47"></a>35~47</h3><h3 id="48-60"><a href="#48-60" class="headerlink" title="48~60"></a>48~60</h3><h2 id="快速升级"><a href="#快速升级" class="headerlink" title="快速升级"></a>快速升级</h2><h2 id="随缘佛系"><a href="#随缘佛系" class="headerlink" title="随缘佛系"></a>随缘佛系</h2><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      <tags>
        <tag>摩尔庄园</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派3B+自动挂载移动硬盘或U盘[转]</title>
    <url>/2021/04/19/%E6%A0%91%E8%8E%93%E6%B4%BE3B-%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E6%88%96U%E7%9B%98/</url>
    <content><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_563ac5900102wwxq.html">原文地址</a></p>
<p>fdisk -l<br>命令查看一下U盘是否有被识别到，及识别的U盘是在哪个位置<br>外接U盘或移动硬盘时，默认不会自动挂载，所以需要用mount 命令挂载。通常我们在/mnt 或/media 目录下新建一个目录作为挂载点。比如：</p>
<p>sudo mkdir /mnt/1GB_USB_flash<br>sudo mount -o uid=pi,gid=pi /dev/sda1 /mnt/1GB_USB_flash<br>//用完之后卸载<br>sudo umount /mnt/1GB_USB_flash  </p>
<span id="more"></span>

<p>sda1 是取决于你的实际情况，a表示第一个硬盘，1表示第一个分区。</p>
<p>挂载exFAT格式的硬盘<br>FAT 格式U盘mount 本身就能支持，但如果你的U盘或移动硬盘使用的是exFAT 格式，mount会说不支持。没关系，安装 exfat-fuse软件之后 mount就支持了。</p>
<p>sudo apt-get install exfat-fuse  </p>
<p>如果想开机自动挂载，而不是每次手工执行，可以编辑 /etc/fstab 文件。比如在末尾添加一行：</p>
<p>/dev/sda1 /mnt/usbdisk vfat rw,defaults 0 0  </p>
<p>挂载NTFS格式的硬盘(读写方式挂载)<br>默认挂载NTFS格式的硬盘只有只读权限，需要借助其它工具实现。</p>
<p>#安装所需软件包  </p>
<p>sudo apt-get install fuse-utils ntfs-3g  </p>
<p>#加载内核模块  </p>
<p>modprobe fuse  </p>
<p>#编辑fstab让移动硬盘开机自动挂载  </p>
<p>sudo nano /etc/fstab  </p>
<p>#在最后一行添加如下内容  </p>
<p>/dev/sda1 /mnt/myusbdrive ntfs-3g defaults,noatime,umask=0000 0 0  </p>
<p>#保存重启，即可生效  </p>
<p>挂载FAT32格式的硬盘</p>
<p>#创建挂载点  </p>
<p>sudo mkdir /mnt/myusbdrive  </p>
<p>#编辑fstab让移动硬盘开机自动挂载  </p>
<p>sudo nano /etc/fstab  </p>
<p>#在最后一行添加如下内容  </p>
<p>/dev/sda1 /mnt/myusbdrive auto defaults,noatime,umask=0000 0 0  </p>
<p>#保存重启，即可生效  </p>
<p>说明：<br>sda1是取决于你的实际情况，a表示第一个硬盘，1表示第一个分区。<br>umask=0000 0 0<br>前面四个0就是对所有人,可读可写可执行,<br>后面两个0,第一个代表dump,0是不备份<br>第二个代表fsck检查的顺序,0表示不检查<br>卸载：sudo umount /mnt/myusbdrive<br>查看挂载情况可使用以下命令。<br>cd /mnt/myusbdrive  </p>
<p>ls  </p>
]]></content>
      <tags>
        <tag>Raspberry</tag>
        <tag>Raspbian</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派3B+无屏幕和键盘配置WiFi[转]</title>
    <url>/2021/04/19/%E6%A0%91%E8%8E%93%E6%B4%BE3B-%E6%97%A0%E5%B1%8F%E5%B9%95%E5%92%8C%E9%94%AE%E7%9B%98%E9%85%8D%E7%BD%AEWiFi/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/huryer/article/details/83146721">原文地址</a></p>
<p>一、WiFi 网络配置<br>用户可以在未启动树莓派的状态下单独修改 /boot/wpa_supplicant.conf 文件配置 WiFi 的 SSID 和密码，这样树莓派启动后会自行读取 wpa_supplicant.conf 配置文件连接 WiFi 设备。</p>
<p>操作方法简单：将刷好 Raspbian  系统的 SD 卡用电脑读取。在 boot 分区，也就是树莓派的 /boot 目录下新建 wpa_supplicant.conf 文件，按照下面的参考格式填入内容并保存 wpa_supplicant.conf 文件。</p>
<span id="more"></span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">country&#x3D;CN</span><br><span class="line">ctrl_interface&#x3D;DIR&#x3D;&#x2F;var&#x2F;run&#x2F;wpa_supplicant GROUP&#x3D;netdev</span><br><span class="line">update_config&#x3D;1</span><br><span class="line"> </span><br><span class="line">network&#x3D;&#123;</span><br><span class="line">ssid&#x3D;&quot;WiFi-A&quot;</span><br><span class="line">psk&#x3D;&quot;12345678&quot;</span><br><span class="line">key_mgmt&#x3D;WPA-PSK</span><br><span class="line">priority&#x3D;1</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">network&#x3D;&#123;</span><br><span class="line">ssid&#x3D;&quot;WiFi-B&quot;</span><br><span class="line">psk&#x3D;&quot;12345678&quot;</span><br><span class="line">key_mgmt&#x3D;WPA-PSK</span><br><span class="line">priority&#x3D;2</span><br><span class="line">scan_ssid&#x3D;1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明以及不同安全性的 WiFi 配置示例：<br>#ssid:网络的ssid<br>#psk:密码<br>#priority:连接优先级，数字越大优先级越高（不可以是负数）<br>#scan_ssid:连接隐藏WiFi时需要指定该值为1</p>
<p>如果你的 WiFi 没有密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network&#x3D;&#123;</span><br><span class="line">ssid&#x3D;&quot;你的无线网络名称（ssid）&quot;</span><br><span class="line">key_mgmt&#x3D;NONE</span><br></pre></td></tr></table></figure>
<p>如果你的 WiFi 使用WEP加密</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network&#x3D;&#123;</span><br><span class="line">ssid&#x3D;&quot;你的无线网络名称（ssid）&quot;</span><br><span class="line">key_mgmt&#x3D;NONE</span><br><span class="line">wep_key0&#x3D;&quot;你的wifi密码&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你的 WiFi 使用WPA/WPA2加密</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network&#x3D;&#123;</span><br><span class="line">ssid&#x3D;&quot;你的无线网络名称（ssid）&quot;</span><br><span class="line">key_mgmt&#x3D;WPA-PSK</span><br><span class="line">psk&#x3D;&quot;你的wifi密码&quot;</span><br></pre></td></tr></table></figure>
<p>如果你不清楚 WiFi 的加密模式，可以在安卓手机上用 root explorer 打开 /data/misc/wifi/wpa/wpa_supplicant.conf，查看 WiFi 的信息。</p>
]]></content>
      <tags>
        <tag>Raspberry</tag>
      </tags>
  </entry>
  <entry>
    <title>文章迁移公告</title>
    <url>/2021/04/19/%E6%96%87%E7%AB%A0%E8%BF%81%E7%A7%BB%E5%85%AC%E5%91%8A/</url>
    <content><![CDATA[<p>2021.4.19日及之前日期的博客均迁移自原博客<a href="https://blog.csdn.net/qq_29627051">CSDN</a>，至今日，文章迁移全部完成</p>
]]></content>
  </entry>
  <entry>
    <title>阿里云Ubuntu搭建Steam饥荒联机版服务器</title>
    <url>/2021/04/19/%E9%98%BF%E9%87%8C%E4%BA%91Ubuntu%E6%90%AD%E5%BB%BASteam%E9%A5%A5%E8%8D%92%E8%81%94%E6%9C%BA%E7%89%88%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>@<a href>TOC</a></p>
<h2 id="一、安装依赖"><a href="#一、安装依赖" class="headerlink" title="一、安装依赖"></a>一、安装依赖</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install libstdc++<span class="number">6</span>:i386 libgcc1:i386 libcurl4<span class="literal">-gnutls</span><span class="literal">-dev</span>:i386 lib32gcc1</span><br></pre></td></tr></table></figure>
<h2 id="二、安装SteamCMD"><a href="#二、安装SteamCMD" class="headerlink" title="二、安装SteamCMD"></a>二、安装SteamCMD</h2><p>新建目录并进入，安装steamcmd</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir ~/steamcmd</span><br><span class="line"><span class="built_in">cd</span> steamcmd</span><br></pre></td></tr></table></figure>
<p>安装SteamCMD</p>
<span id="more"></span>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 下载安装文件</span></span><br><span class="line"><span class="built_in">wget</span> https://steamcdn<span class="literal">-a</span>.akamaihd.net/client/installer/steamcmd_linux.tar.gz</span><br><span class="line"><span class="comment">## 解压并删除</span></span><br><span class="line">tar <span class="literal">-xvzf</span> ~/steamcmd/steamcmd_linux.tar.gz</span><br><span class="line"><span class="built_in">rm</span> steamcmd_linux.tar.gz</span><br></pre></td></tr></table></figure>
<h2 id="三、安装DST服务端"><a href="#三、安装DST服务端" class="headerlink" title="三、安装DST服务端"></a>三、安装DST服务端</h2><p>启动steamcmd</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">./steamcmd.sh</span><br></pre></td></tr></table></figure>
<p>使用公共账号登录steam</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">login anonymous</span><br></pre></td></tr></table></figure>
<p>指定DST安装目录</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">force_install_dir ../myDSTserver</span><br></pre></td></tr></table></figure>
<p>安装DST服务端</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">app_update <span class="number">343050</span> validate</span><br></pre></td></tr></table></figure>
<p>当出现<code>Success! App &#39;343050&#39; fully installed.</code>的时候表示安装成功<br>安装完成后退出steamcmd</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure>
<h2 id="四、配置DST服务端"><a href="#四、配置DST服务端" class="headerlink" title="四、配置DST服务端"></a>四、配置DST服务端</h2><h4 id="1-生成其余配置文件"><a href="#1-生成其余配置文件" class="headerlink" title="1. 生成其余配置文件"></a>1. 生成其余配置文件</h4><p>进入DST的安装目录的bin文件夹，运行<code>dontstarve_dedicated_server_nullrenderer</code>生成<code>.klei</code>等目录和文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;myDSTserver&#x2F;bin</span><br><span class="line">.&#x2F;dontstarve_dedicated_server_nullrenderer</span><br></pre></td></tr></table></figure>
<h4 id="2-目录结构"><a href="#2-目录结构" class="headerlink" title="2. 目录结构"></a>2. 目录结构</h4><p><code>/root/.klei</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── Agreements</span><br><span class="line">│   └── DoNotStarveTogether</span><br><span class="line">│       └── agreements.ini</span><br><span class="line">└── DoNotStarveTogether</span><br><span class="line">    ├── Cluster_1</span><br><span class="line">    │   └── Master</span><br><span class="line">    └── MyDediServer</span><br><span class="line">        ├── Caves</span><br><span class="line">        ├── Master</span><br><span class="line">        ├── adminlist.txt</span><br><span class="line">        ├── cluster.ini</span><br><span class="line">        └── cluster_token.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>/root/myDSTserver</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── bin</span><br><span class="line">│   ├── dontstarve</span><br><span class="line">│   ├── dontstarve.xpm</span><br><span class="line">│   ├── dontstarve_dedicated_server_nullrenderer</span><br><span class="line">│   ├── lib32</span><br><span class="line">│   ├── scripts</span><br><span class="line">│   └── steam_appid.txt</span><br><span class="line">├── data</span><br><span class="line">│   ├── anim</span><br><span class="line">│   ├── bigportraits</span><br><span class="line">│   ├── databundles</span><br><span class="line">│   ├── fx</span><br><span class="line">│   ├── images</span><br><span class="line">│   ├── levels</span><br><span class="line">│   ├── minimap</span><br><span class="line">│   ├── movies</span><br><span class="line">│   ├── scripts_readme.txt</span><br><span class="line">│   └── sound</span><br><span class="line">├── dontstarve.xpm</span><br><span class="line">├── mods</span><br><span class="line">│   ├── INSTALLING_MODS.txt</span><br><span class="line">│   ├── MAKING_MODS.txt</span><br><span class="line">│   ├── dedicated_server_mods_setup.lua</span><br><span class="line">│   └── modsettings.lua</span><br><span class="line">├── steamapps</span><br><span class="line">│   ├── appmanifest_343050.acf</span><br><span class="line">│   ├── downloading</span><br><span class="line">│   ├── libraryfolders.vdf</span><br><span class="line">│   ├── shadercache</span><br><span class="line">│   └── temp</span><br><span class="line">└── version.txt</span><br></pre></td></tr></table></figure>
<h4 id="3-获取服务器配置文件"><a href="#3-获取服务器配置文件" class="headerlink" title="3. 获取服务器配置文件"></a>3. 获取服务器配置文件</h4><p><a href="https://accounts.klei.com/account/game/servers?game=DontStarveTogether">官网创建并下载配置文件</a><br>(MyDediServer.zip)<br>把服务器配置压缩包远程传输到服务器上</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scp <span class="literal">-r</span> MyDediServer.zip username@<span class="number">192.168</span>.<span class="number">0.1</span>:/home/username/</span><br></pre></td></tr></table></figure>
<h4 id="4-替换服务器配置文件"><a href="#4-替换服务器配置文件" class="headerlink" title="4. 替换服务器配置文件"></a>4. 替换服务器配置文件</h4><p>在服务器内把压缩包解压，替换掉默认存档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip MyDediServer.zip</span><br><span class="line">rm -r ~&#x2F;.klei&#x2F;DoNotStarveTogether&#x2F;Cluster_1</span><br><span class="line">mv MyDediServer ~&#x2F;.klei&#x2F;DoNotStarveTogether</span><br></pre></td></tr></table></figure>
<h4 id="5-添加管理员"><a href="#5-添加管理员" class="headerlink" title="5. 添加管理员"></a>5. 添加管理员</h4><p>在存档目录下建立<code>adminlist.txt</code>文件，将需要的UserID输入即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;.klei&#x2F;DoNotStarveTogether&#x2F;MyDediServer</span><br><span class="line">touch adminlist.txt</span><br><span class="line">vim adminlist.txt     ## 写入UserID即可</span><br></pre></td></tr></table></figure>
<h2 id="五、添加Mod"><a href="#五、添加Mod" class="headerlink" title="五、添加Mod"></a>五、添加Mod</h2><p>修改<code>dedicated_server_mods_setup.lua</code>文件可以让服务器每次启动的时候自动加载和更新mod，该文件位于<code>~/myDSTserver/mods</code>文件夹。向下面这样添加，数字为创意工坊中mod的编号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ServerModSetup(&quot;345692228&quot;)</span><br><span class="line">ServerModSetup(&quot;346968521&quot;)</span><br><span class="line">ServerModSetup(&quot;352373173&quot;)</span><br><span class="line">ServerModCollectionSetup(&quot;379114180&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="六、启动脚本"><a href="#六、启动脚本" class="headerlink" title="六、启动脚本"></a>六、启动脚本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">steamcmd_dir&#x3D;&quot;$HOME&#x2F;steamcmd&quot;</span><br><span class="line">install_dir&#x3D;&quot;$HOME&#x2F;myDSTserver&quot;</span><br><span class="line">cluster_name&#x3D;&quot;MyDediServer&quot;</span><br><span class="line">dontstarve_dir&#x3D;&quot;$HOME&#x2F;.klei&#x2F;DoNotStarveTogether&quot;</span><br><span class="line">cd &quot;$steamcmd_dir&quot;</span><br><span class="line">cd &quot;$install_dir&#x2F;bin&quot;</span><br><span class="line">run_shared&#x3D;(.&#x2F;dontstarve_dedicated_server_nullrenderer)</span><br><span class="line">run_shared+&#x3D;(-console)</span><br><span class="line">run_shared+&#x3D;(-cluster &quot;$cluster_name&quot;)</span><br><span class="line">run_shared+&#x3D;(-monitor_parent_process $$)</span><br><span class="line">run_shared+&#x3D;(-shard)</span><br><span class="line">&quot;$&#123;run_shared[@]&#125;&quot; Caves  | sed &#39;s&#x2F;^&#x2F;Caves: &#x2F;&#39; &amp;</span><br><span class="line">&quot;$&#123;run_shared[@]&#125;&quot; Master | sed &#39;s&#x2F;^&#x2F;Master: &#x2F;&#39;</span><br></pre></td></tr></table></figure>
<h2 id="验证服务器运行"><a href="#验证服务器运行" class="headerlink" title="验证服务器运行"></a>验证服务器运行</h2><p><a href="https://dstserverlist.appspot.com/">在线验证服务器运行</a></p>
<h2 id="六、后台运行服务器"><a href="#六、后台运行服务器" class="headerlink" title="六、后台运行服务器"></a>六、后台运行服务器</h2><p>screen常用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出当前所有screen</span><br><span class="line">screen -ls</span><br><span class="line"></span><br><span class="line"># 创建一个名为server的screen</span><br><span class="line">screen -S server</span><br><span class="line"></span><br><span class="line"># 切换到server的screen</span><br><span class="line">screen -r server</span><br><span class="line"></span><br><span class="line"># 杀死一个名为server的screen</span><br><span class="line">screen -S server -X quit</span><br><span class="line"></span><br><span class="line"># 退出该screen(会继续执行）</span><br><span class="line">ctrl+a+d</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>云服务器</tag>
        <tag>饥荒</tag>
      </tags>
  </entry>
  <entry>
    <title>远为观止</title>
    <url>/2021/04/21/%E8%BF%9C%E4%B8%BA%E8%A7%82%E4%B9%8B/</url>
    <content><![CDATA[<p>如果想戒掉某种习惯</p>
<span id="more"></span>

<p>某种东西，某个人，那么，就不要去做任何的接触</p>
<p>不要去想，不要去看，不要去触摸</p>
<p>一旦触及到，一种名为瘾的东西就会发作，无法遏止，之前做的努力就会大打折扣</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>阿里云Ubuntu18.04/20.04LTS上搭建Minecraft服务器</title>
    <url>/2021/04/19/%E9%98%BF%E9%87%8C%E4%BA%91Ubuntu18-04-20-04LTS%E4%B8%8A%E6%90%AD%E5%BB%BAMinecraft%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>之前用闲置的树莓派3B+搭建过mc服务器，内存只有1G的3B+体验极差，gg<br>最近从阿里云的高校活动领取到了4G+40G的ECS，总算是有条件了</p>
</blockquote>
<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p>
<h1 id="ECS环境配置"><a href="#ECS环境配置" class="headerlink" title="ECS环境配置"></a>ECS环境配置</h1><h2 id="服务器环境配置"><a href="#服务器环境配置" class="headerlink" title="服务器环境配置"></a>服务器环境配置</h2><h3 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h3><ul>
<li>Ubuntu 18.04LTS </li>
<li>2核CPU </li>
<li>4GiB内存 40GiB云盘</li>
<li>1Mbps带宽<h3 id="配置安全规则"><a href="#配置安全规则" class="headerlink" title="配置安全规则"></a>配置安全规则</h3>如果不进行配置，则无法从MC客户端查找到服务器<br><code>实例xxxxxxxxxxxx(指代ID)</code> -&gt;<code>本实例安全组</code>-&gt;<code>安全组列表</code>-&gt;<code>配置规则</code>-&gt;<code>安全组规则</code>-&gt;<code>入方向</code>-&gt;<code>手动添加</code></li>
</ul>
<span id="more"></span>

<p>规则详细如下：<br><img src="https://img-blog.csdnimg.cn/20200727113742684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjI3MDUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="配置Java环境"><a href="#配置Java环境" class="headerlink" title="配置Java环境"></a>配置Java环境</h2><h3 id="更新环境"><a href="#更新环境" class="headerlink" title="更新环境"></a>更新环境</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt <span class="literal">-y</span> upgrade </span><br></pre></td></tr></table></figure>
<h3 id="安装OpenJDK8"><a href="#安装OpenJDK8" class="headerlink" title="安装OpenJDK8"></a>安装OpenJDK8</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk<span class="literal">-8</span><span class="literal">-jdk</span></span><br><span class="line"><span class="comment">## OpenJDK8中不包含客户端需要的OpenJFX，服务器运行不需要OpenJFX，因此在客户端上建议用OracleJDK代替OpenJDK，具体方法如下</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/qq_29627051/article/details/107643523">Ubuntu安装OracleJDK8</a></p>
<h1 id="安装部署Minecraft服务器"><a href="#安装部署Minecraft服务器" class="headerlink" title="安装部署Minecraft服务器"></a>安装部署Minecraft服务器</h1><p>本人是在本地机上下载<code>paper.jar</code>，再远程传输到服务器上</p>
<h2 id="下载和传输"><a href="#下载和传输" class="headerlink" title="下载和传输"></a>下载和传输</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>从官网选择合适的版本下载<br>本文使用<code>PaperSpigot</code>，同时也推荐使用<code>PaperSpigot</code>，<code>Paperspigot</code>可以向下兼容几乎所有的<code>Spigot</code>、<code>Craftbukkit</code>的插件，并且有更好的性能和更小的资源占用</p>
<p>Download :</p>
<ul>
<li><a href="https://papermc.io/downloads">PaperSpigot</a></li>
<li><a href="https://getbukkit.org/download/spigot">Spigot</a></li>
<li><a href="https://getbukkit.org/download/craftbukkit">Craftbukkit</a></li>
<li><a href="https://www.minecraft.net/en-us/download/server/">Minecraft Server</a><h3 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h3></li>
</ul>
<ol>
<li>把 <code>本地/服务器</code> <code>发送/接收</code> 文件的目录权限改为<code>777</code><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">777</span> xxx</span><br></pre></td></tr></table></figure></li>
<li>发送文件<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scp <span class="literal">-r</span> paper.jar username@<span class="number">192.168</span>.<span class="number">1.1</span>:/home/username/ <span class="comment">##要把paper.jar username 192.168.1.1等根据实际情况更改</span></span><br></pre></td></tr></table></figure>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2>通过阿里云控制台进入服务器，Ubuntu默认为<code>root</code>账号</li>
<li>把接收到的文件放进新建的文件夹：<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir paper</span><br><span class="line"><span class="built_in">mv</span> paper.jar paper</span><br></pre></td></tr></table></figure></li>
<li>创建启动脚本<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vim start.sh</span><br></pre></td></tr></table></figure>
写入以下内容：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -Xms512M -Xmx1024M -XX:MaxPermSize&#x3D;128M -jar paper.jar</span><br></pre></td></tr></table></figure>
使脚本可执行：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x start.sh</span><br></pre></td></tr></table></figure></li>
<li>安装<br>第一次启动脚本，建立部分文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;start.sh</span><br></pre></td></tr></table></figure>
编辑生成的<code>eula.txt</code>，将``false<code>改为</code>true：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim eula.txt</span><br></pre></td></tr></table></figure>
再次运行脚本:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;start.sh</span><br></pre></td></tr></table></figure>
服务器成功启动后，可以在控制台进行一些操作，使用<code>stop</code>命令安全停止服务器</li>
<li>使用screen保持服务器后台运行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install screen -y</span><br><span class="line">screen -S paper</span><br><span class="line">cd ~&#x2F;paper</span><br><span class="line">.&#x2F;start.sh</span><br></pre></td></tr></table></figure>
<h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2></li>
</ol>
<ul>
<li><code>Paper</code>、<code>Spigot</code>不支持mod，如果需要mod可移步<code>CraftBukkit</code>或<code>Minecraft Server</code></li>
<li>即便是纯净生存服，一些插件也是少不了的，比如<code>EssentialsX</code>等利器，</li>
<li>plugin的放置在目录的<code>plugins</code>文件夹内</li>
<li>可以在<a href="https://www.mcbbs.net/">MCBBS</a>、<a href="https://www.spigotmc.org/resources/categories/spigot.4/">SpigotMC</a>等论坛很容易的找到许多有用的plugin，如果图省事的话，找个整合包把plugin拆出来也是不错的选择</li>
</ul>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>SSH</tag>
        <tag>云服务器</tag>
        <tag>Minecraft</tag>
      </tags>
  </entry>
  <entry>
    <title>一些反思</title>
    <url>/2021/05/14/%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<p>写这篇文章是始于今天上午的摸鱼状态</p>
<span id="more"></span>

<ul>
<li><p>反思最近几天，上午的状态都不怎么乐观，在写这篇随笔之前并没有提前列纲思考，仅是边想边写，想到什么就写一些吧。这样的原因也能用没有状态来解释，思维迟钝不想思考，其实就是单纯的懒狗</p>
</li>
<li><p>就在刚刚停笔起来去洗手间的时候，还把杯子带倒了，撒了不少水</p>
<ul>
<li>卫生间隔间里一个哥们蹲坑玩手机，啪的一下手机掉到隔间门外面去了，顺手帮他捡到递了进去，这个小插曲也让我郁闷的心情有了些缓解</li>
</ul>
</li>
<li><p>沿着刚才的思路，首先是作息问题</p>
<ul>
<li>平常是24：00~7：30，这样其实不怎么好，于是在大约一周前开始改变，改为11：30之前睡，但是在这个问题解决之前，出现了新的问题，失眠<ul>
<li>躺在床上，头脑异常清醒，不敢看时间，怕灯光会更难入睡，凭体感盲猜1点多那会应该没有睡着，早晨醒来后也很累</li>
<li>对于失眠，我有一些猜测——下午喝的速冻咖啡粉，所以准备进行测试</li>
<li>失眠的第二天下午，我依旧喝了些咖啡，第三天也是，同时一直出现失眠现象</li>
<li>那么为什么不停掉咖啡呢？其实咖啡也是从前3天开始用的，原因是下午的状态很颓靡，结合生活和回忆，明明午休时间延长了30min，原因就是中午却没有以前休息的充分</li>
<li>得出这样的结论是很滑稽的，昨天和朋友聊天时，谈到自制力的问题，我对自己的自制力有比较清晰的认知<ul>
<li>我的自制力是基于目的/目标的，没有想做的事，没有值得的，那我努力又是为了什么，昨天也谈到了高中时候的事，前两年在玩这话其实并没有装逼，那时候，我只想做感兴趣的，学习也只是完成作业要求，付出对得起自己良心的精力在学习上，成绩也就在中游略微偏上，初中一直是前面，那时候努力学是因为努力学能得到老师看重的这么一个正反馈机制存在，实际上在初三下学习开始就不学了，年级排名掉了100+，中考也很敷衍，全是靠前两年的积累混，那段时间迷上了柯南，中考后出了成绩妈妈很焦虑，到处问老师我这个成绩能考上学吗，那时候我也非常叛逆，问什么也不说，班主任和她解释：“这个分数随便想上哪个学校哪个班都随便去”，妈妈觉得班主任在敷衍她，妈妈这个人太过于感性，很难于去理性的思考和分析问题，这么多年回想起那件事，有一些愧疚，有一些无力，我没有权力去指责去苛刻亲人如何，他们的人生经历如此，我的叛逆和冲突是无法避免的，如果能带着经历重来一次，我们当时的关系一定会有改观，但是经历这件事作为假设，那无异于魂穿，本身就不现实</li>
<li>上一段话的主题是自制力问题，后面就歪了。我是容易被情感扰乱思路的，这种发自内心的感觉是很舒适的，同时也有很多问题，会暴漏很多内在，容易冲动做出一些错事，会容易受伤。所以，我会克制表露情感，曾经连有悲伤情节的电影都不忍心去看，这是我懦弱的一面，也许只有一个人的时候，听着单纯的旋律，阅着，又是才会试着去听心里的声音</li>
<li>重回自制力的问题。高三的努力是想有机会去追求自己喜欢的东西，能够有可能把爱好变成事业，我可以克制住自己，用一些零散的时间弥补前两年的遗漏，最后考取了一个不算好也不算差的成绩；对某个技术感兴趣时，也能一整天坐在实验室里除了必要不挪屁股；也许我并没有自制力，只是愿意或者不愿意。由于现在状态太偏向于情感，这个问题的思考太浅，如果有机会再进行反思。</li>
</ul>
</li>
</ul>
</li>
<li>中午明明有很多休息时间，浪费在手机上了，自制力太差，既然现在想到了并写在了这里，那我一定会做出改变</li>
</ul>
</li>
<li><p>从10~11：40，写了这篇反思（？，还是比较值得的</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
</search>
